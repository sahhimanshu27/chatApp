// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  BASIC
  ADMIN
}

model User {
  id        String  @id   @default(uuid())
  username  String  @unique
  password  String
  email     String  @unique
  name      String
  role      Role    @default(BASIC)
  chats     Chats[] @relation("Chats")
  chatRequests Chats[] @relation("ChatRequests")
  groupsCreated    Group[] @relation("GroupsCreated")
  adminGroups Group[]
  groups  Group[] @relation("Groups")
  reactions   Reactions[]

  @@index([username, name])
}

model Chats {
  id          String  @id   @default(uuid())
  updatedAt   DateTime  @updatedAt
  createdBy   User  @relation("Chats",fields: [creatorId], references: [id])
  creatorId   String
  acceptedBy  User  @relation("ChatRequests", fields: [acceptorId], references: [id])
  acceptorId  String
  accepted    Boolean?
  chat        Chat[]
}

model Chat {
  id          String  @id   @default(uuid())
  updatedAt   DateTime  @updatedAt
  senderId    String 
  receiverId  String
  Chat        Chats[]
  reactions   Reactions[]
}

model Group {
  id          String  @id   @default(uuid())
  updatedAt   DateTime  @updatedAt
  createdBy   User  @relation("GroupsCreated",fields: [creatorId], references: [id])
  creatorId   String
  admin       User  @relation(fields: [adminId], references: [id])
  adminId     String
  members     User[]  @relation("Groups")
}

model Reactions {
  id          String  @id   @default(uuid())
  chat        Chat[]  
  reaction    String  
  reactedBy   User[]
}